<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_Ignore" xml:space="preserve">
    <value>&amp;Ignorar</value>
  </data>
  <data name="Button_No" xml:space="preserve">
    <value>&amp;Não</value>
  </data>
  <data name="Button_Ok" xml:space="preserve">
    <value>&amp;Ok</value>
  </data>
  <data name="Button_Yes" xml:space="preserve">
    <value>Sim</value>
  </data>
  <data name="CheckBox_AlwaysAskThisWhenChangingRtl" xml:space="preserve">
    <value>Perguntar sempre ao alterar rtl (dpe)</value>
  </data>
  <data name="Duration" xml:space="preserve">
    <value>Duração</value>
  </data>
  <data name="EndTime" xml:space="preserve">
    <value>Tempo Final</value>
  </data>
  <data name="ErrorType_EndTime" xml:space="preserve">
    <value>Tempo Final</value>
  </data>
  <data name="ErrorType_StartAndEndTime" xml:space="preserve">
    <value>Tempo inicial e final</value>
  </data>
  <data name="ErrorType_StartTime" xml:space="preserve">
    <value>Tempo inicial</value>
  </data>
  <data name="ErrorType_TextError" xml:space="preserve">
    <value>Erro de texto</value>
  </data>
  <data name="Error_EndTimeIsLessThan0" xml:space="preserve">
    <value>Tempo final inferior a 0</value>
  </data>
  <data name="Error_EndTimeIsoverAnotherSubtitleAt" xml:space="preserve">
    <value>O tempo final sobrepõe outra legenda em</value>
  </data>
  <data name="Error_StartTimeIsEqualTheEndTime" xml:space="preserve">
    <value>O tempo inicial é igual ao tempo final</value>
  </data>
  <data name="Error_StartTimeIsLargerThanTheEndTime" xml:space="preserve">
    <value>O tempo inicial é superior ao tempo final</value>
  </data>
  <data name="Error_StartTimeIsLessThan0" xml:space="preserve">
    <value>O tempo inicial é inferior a 0</value>
  </data>
  <data name="Error_StartTimeIsOverAnotherSubtitleAt" xml:space="preserve">
    <value>O tempo inicial sobrepõe outra legenda em</value>
  </data>
  <data name="Error_ThisSubtitleEndTimeIsLessOrEqual0" xml:space="preserve">
    <value>O tempo final desta legenda é inferior ou igual a 0</value>
  </data>
  <data name="Error_ThisSubtitleEndTimeIsOverAnotherOne" xml:space="preserve">
    <value>O tempo final desta legenda sobrepõe outra</value>
  </data>
  <data name="Error_ThisSubtitleHasNoText" xml:space="preserve">
    <value>Esta legenda não contém texto</value>
  </data>
  <data name="Error_ThisSubtitleIsInsideAnotherOne" xml:space="preserve">
    <value>Esta legenda está dentro de outra</value>
  </data>
  <data name="Error_ThisSubtitleIsOverAnotherOne" xml:space="preserve">
    <value>Esta legenda sobrepõe outra</value>
  </data>
  <data name="Error_ThisSubtitlesDurationIs0OrLess" xml:space="preserve">
    <value>A duração desta legenda é 0 ou menos</value>
  </data>
  <data name="Error_ThisSubtitleStartTimeIsLessOrEqual0" xml:space="preserve">
    <value>O tempo inicial desta legenda é inferior ou igual a 0</value>
  </data>
  <data name="Error_ThisSubtitleStartTimeIsOverAnotherOne" xml:space="preserve">
    <value>O tempo inicial desta legenda sobrepõe outra</value>
  </data>
  <data name="Error_YouMustWriteAText" xml:space="preserve">
    <value>Tem que escrever um texto</value>
  </data>
  <data name="Mark" xml:space="preserve">
    <value>Marca</value>
  </data>
  <data name="Media" xml:space="preserve">
    <value>Mídia</value>
  </data>
  <data name="MessageCaption_CheckForErrors" xml:space="preserve">
    <value>Verificar erros</value>
  </data>
  <data name="MessageCaption_Error" xml:space="preserve">
    <value>Erro</value>
  </data>
  <data name="MessageCaption_RightToLeftChanged" xml:space="preserve">
    <value>Direita para a Esquerda Alterado</value>
  </data>
  <data name="MessageCaption_Warning" xml:space="preserve">
    <value>Alerta</value>
  </data>
  <data name="Message_ApplyRightToLeftAlignementValueToAllSubtitleOfThisSubtitlesTrack" xml:space="preserve">
    <value>Aplicar valor de alinhamento da direita para a esquerda a todas as legendas desta faixa ?</value>
  </data>
  <data name="Message_SelectSubtitlesTrackFirst" xml:space="preserve">
    <value>Seleccione primeiro a faixa de legendas</value>
  </data>
  <data name="Message_TheNewDurationWillBeLessOrEqual0" xml:space="preserve">
    <value>A nova duração será inferior ou igual a 0</value>
  </data>
  <data name="Message_TheTimeYouSetWillMakeTheSubtitlesTrackEndAtAPositionMoreThanTheMediaDuration" xml:space="preserve">
    <value>O tempo que definiu fará com que a faixa de legendas termine numa posição para além da duração do mídia</value>
  </data>
  <data name="Message_TheTimeYouSetWillMakeTheSubtitlesTrackStartAtAPositionLessThan0" xml:space="preserve">
    <value>O tempo que definiu irá fazer com que a faixa de legendas comece numa posição menor que 0 !!</value>
  </data>
  <data name="Shift" xml:space="preserve">
    <value>Desvio</value>
  </data>
  <data name="ShiftTime" xml:space="preserve">
    <value>Tempo de Desvio</value>
  </data>
  <data name="SoundOff" xml:space="preserve">
    <value>Som Desligado</value>
  </data>
  <data name="SoundOn" xml:space="preserve">
    <value>Som Ligado</value>
  </data>
  <data name="StartTime" xml:space="preserve">
    <value>Tempo Inicial</value>
  </data>
  <data name="Status_CheckingForBasicErrors" xml:space="preserve">
    <value>A procurar erros básicos ...</value>
  </data>
  <data name="Status_Done" xml:space="preserve">
    <value>Concluído</value>
  </data>
  <data name="Status_ErrorsFound" xml:space="preserve">
    <value>Erro(s) encontrado(s).</value>
  </data>
  <data name="Status_Fixing" xml:space="preserve">
    <value>A reparar ...</value>
  </data>
  <data name="SubtitlesTrack" xml:space="preserve">
    <value>Faixa de Legendas</value>
  </data>
  <data name="SUBTITLETEXTS" xml:space="preserve">
    <value>&lt;TEXTOS  DA LEGENDA&gt;</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="Status_LineCharsCount" xml:space="preserve">
    <value>Caracteres por linha</value>
  </data>
  <data name="Status_TotalCharsCount" xml:space="preserve">
    <value>Total de caracteres</value>
  </data>
  <data name="Status_Line" xml:space="preserve">
    <value>Linha</value>
  </data>
  <data name="Unit_Second" xml:space="preserve">
    <value>Seg</value>
  </data>
  <data name="Message_PleaseCheckTracksToPreview" xml:space="preserve">
    <value>Por favor seleccione a(s) faixa(s) que quer pré-visualizar usando a lista de 'Faixas de Legendas'.</value>
  </data>
  <data name="Text_DoubleClickToShowWaveForm" xml:space="preserve">
    <value>double-click to show waveform</value>
  </data>
  <data name="Status_GeneratingWaveFormPleaseWait" xml:space="preserve">
    <value>Generating waveform, please wait ...</value>
  </data>
</root>